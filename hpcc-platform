#!/usr/bin/env python
'''
#############################################################################

    HPCC SYSTEMS software Copyright (C) 2012 HPCC Systems.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
#############################################################################
'''

from __future__ import print_function

import os
import signal
import time
import socket
import ConfigParser
from datetime import datetime
import logging
import subprocess

from radssh.ssh import Cluster
from radssh.console import RadSSHConsole
from radssh.authmgr import AuthManager
import radssh.config

def signal_handler(signo, frame):
    if signo == signal.SIGINT:
        print('\033[0m\nhpcc-run.py interrupted')
    else:
        print('\033[0m\nExiting hpcc-run.py')
    os._exit(int(signo))

signal.signal(signal.SIGINT,  signal_handler)
signal.signal(signal.SIGQUIT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)


class HPCC(object):
    '''
    This class implements the logic necessary for driving the HPCC Platform
    and it's specified components within the environment.xml and configuration
    files
    '''

    def __init__(self, component=None, save=False, force_stop=False, debug=False):
        '''
        Constructor
        '''

        # configuration file setup for reading
        self.config = ConfigParser.ConfigParser()
        self.config.read('/etc/HPCCSystems/environment.conf')

        # options that are parsed in from the command line
        self.component              = component
        self.save                   = save
        self.force_stop             = force_stop
        self.debug                  = debug

        self.login                  = AuthManager(self.config.get('DEFAULT','user'),include_userkeys=True)
        self.log                    = self.config.get('DEFAULT','log') + '/hpcc_platform_' + \
                                      datetime.isoformat(datetime.today(),'.') + '.log'

        # build host list
        if self.component:
            cmd = "/opt/HPCCSystems/sbin/configgen -env " + self.config.get('DEFAULT', 'configs') + "/" + \
                self.config.get('DEFAULT', 'environment') + " -c " + self.component + " -listall | " + \
                "awk 'BEGIN { FS = \",\" } ; {print $3}' | sort | uniq"
        else:
            cmd = "/opt/HPCCSystems/sbin/configgen -env " + self.config.get('DEFAULT', 'configs') + "/" + \
                self.config.get('DEFAULT', 'environment') + " -listall | " + \
                "awk 'BEGIN { FS = \",\" } ; {print $3}' | sort | uniq"
        try:
            rc = subprocess.Popen(cmd,stdout=PIPE,shell=True)
            stdout, stderr = rc.communicate()
            self.hosts = stdout.splitlines()
        except OSError as e:
            print("Could not build host list: %s" % e)
            exit(1)

        self.console                = RadSSHConsole()
        self.connections            = [(x, None) for x in self.hosts]

        socket.setdefaulttimeout(10)



    def usage(self):
        print("Usage:  hpcc-platform [option(s)]\n")
        print(" -c|--component      -c <component_name>")
        print(" -l|--list           list all components and their respective addresses")
        print(" -d|--debug          debug logging level")
        print(" -f|--force          sigkill on components that fail to stop")
        print(" -v|--verbose        print all information to STDOUT")
        print(" -?|--help           print help")

if __name__ == '__main__':
    while True:
        time.sleep(1)
