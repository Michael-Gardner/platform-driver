#!/usr/bin/env python
'''
#############################################################################

    HPCC SYSTEMS software Copyright (C) 2012 HPCC Systems.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
#############################################################################
'''

from __future__ import print_function

import os
import signal
import getopt
import sys
import pwd
import logging

from utils.platform import Platform

def signal_handler(signo, frame):
    if signo == signal.SIGINT:
        logging.info("SIGINT caught")
    logging.info("Exiting")
    os._exit(int(signo))

signal.signal(signal.SIGINT,  signal_handler)
signal.signal(signal.SIGQUIT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

def usage():
    print("Usage:  hpcc-platform [option(s)]\n")
    print(" list-components           list all components and their respective addresses")
    print(" -f|--force          sigkill on components that fail to stop")
    print(" -v|--verbose        print logging information to STDOUT")
    print(" -p|--ping           check connections to cluster nodes")
    print(" -?|--help           print help")

if __name__ == '__main__':

    # setup logging
    logname = "hpcc-platform"
    logging.basicConfig(filename=logname + ".debug.log",level=logging.DEBUG)
    logger = logging.getLogger(__name__)
    lh = logging.FileHandler(logname + ".log")
    lh.setLevel(logging.INFO)
    lf = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    lh.setFormatter(lf)
    logger.addHandler(lh)

    logger.info("starting hpcc-platform driver")
    logger.debug("debugging working")

    uid = pwd.getpwnam('hpcc')[2]
    os.setuid(uid)

    platform = Platform()

    try:
        opts, args = getopt.getopt(sys.argv[1:],"",["help","list","show","start","stop","restart","status"])
    except getopt.GetoptError as err:
        logger.error(str(err))
        usage()
        exit(1)

    for arg, value in opts:
        if arg in ("-?", "help"):
            usage()
            exit(0)
        elif arg in ("list"):
            platform.list(value)
            exit(0)
        elif arg in ("show"):
            platform.show(value)
            exit(0)
        elif arg in ("start"):
            logger.info("starting")
            platform.start(value)
            exit(0)
        elif arg in ("stop"):
            platform.stop(value)
            exit(0)
        elif arg in ("restart"):
            platform.restart(value)
            exit(0)
        elif arg in ("status"):
            platform.status(value)
            exit(0)
        else:
            print("Unknown Option: %s" % arg)
            logger.debug("Unknown Option: %s", arg)
            usage()
            exit(1)






