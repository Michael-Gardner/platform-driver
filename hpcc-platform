#!/usr/bin/env python
'''
#############################################################################

    HPCC SYSTEMS software Copyright (C) 2012 HPCC Systems.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
#############################################################################
'''

from __future__ import print_function

import os
import signal
import time
import socket
import ConfigParser
from datetime import datetime
import logging
import subprocess
import getopt
import sys
import pwd

from radssh.ssh import Cluster
from radssh.console import RadSSHConsole
from radssh.authmgr import AuthManager
import radssh.config

def signal_handler(signo, frame):
    if signo == signal.SIGINT:
        print('\033[0m\nhpcc-run.py interrupted')
    else:
        print('\033[0m\nExiting hpcc-run.py')
    os._exit(int(signo))

signal.signal(signal.SIGINT,  signal_handler)
signal.signal(signal.SIGQUIT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)


class HPCC(object):
    '''
    This class implements the logic necessary for driving the HPCC Platform
    and it's specified components within the environment.xml and configuration
    files
    '''

    def __init__(self, ping=False, component=None, save=False, force_stop=False, debug=False, verbose=False,\
                 conf_file="/etc/HPCCSystems/environment.conf", print_list=False):
        '''
        Constructor
        '''

        self.component              = component
        self.verbose                = verbose
        self.print_list             = print_list
        self.save                   = save
        self.force_stop             = force_stop
        self.debug                  = debug
        self.conf_file              = conf_file

        self.hosts                  = []
        self.login                  = None
        self.console                = None
        self.connections            = None
        self.cluster                = None

        self.config = ConfigParser.ConfigParser()
        self.config.read(self.conf_file)
        self.user = self.config.get('DEFAULT','user')
        self.log                    = self.config.get('DEFAULT','log') + '/hpcc_platform_' + \
                                      datetime.isoformat(datetime.today(),'.') + '.log'

    @property
    def conf_file(self):
        return self.__conf_file

    @conf_file.setter
    def conf_file(self,val):
        try:
            self.__conf_file = str(val)
        except ValueError as err:
            print(str(err))


    @property
    def component(self):
        return self.__component

    @component.setter
    def component(self,val):
        try:
            self.__component = str(val)
        except ValueError as err:
            print(str(err))

    @property
    def verbose(self):
        return self.__verbose

    @verbose.setter
    def verbose(self,val):
        try:
            self.__verbose = bool(val)
        except ValueError as err:
            print(str(err))

    @property
    def print_list(self):
        return self.__print_list

    @print_list.setter
    def print_list(self,val):
        try:
            self.__print_list = bool(val)
        except ValueError as err:
            print(str(err))

    @property
    def save(self):
        return self.__save

    @save.setter
    def save(self,val):
        try:
            self.__save = bool(val)
        except ValueError as err:
            print(str(err))

    @property
    def force_stop(self):
        return self.__force_stop

    @force_stop.setter
    def force_stop(self,val):
        try:
            self.__force_stop = bool(val)
        except ValueError as err:
            print(str(err))

    @property
    def debug(self):
        return self.__debug

    @debug.setter
    def debug(self,val):
        try:
            self.__debug = bool(val)
        except ValueError as err:
            print(str(err))

    @property
    def ping(self):
        return self.__ping

    @ping.setter
    def ping(self,val):
        try:
            self.__ping = bool(val)
        except ValueError as err:
            print(str(err))


    def getHostList(self):
        try:
            if self.component:
                cmd = "/opt/HPCCSystems/sbin/configgen -env " + self.config.get('DEFAULT', 'configs') + "/" + \
                    self.config.get('DEFAULT', 'environment') + " -c " + self.component + " -listall | " + \
                    "awk 'BEGIN { FS = \",\" } ; {print $3}' | sort | uniq"
            else:
                cmd = "/opt/HPCCSystems/sbin/configgen -env " + self.config.get('DEFAULT', 'configs') + "/" + \
                    self.config.get('DEFAULT', 'environment') + " -listall | " + \
                    "awk 'BEGIN { FS = \",\" } ; {print $3}' | sort | uniq"
            rc = subprocess.Popen(cmd,stdout=subprocess.PIPE,shell=True)
            stdout, stderr = rc.communicate()
            self.hosts = stdout.splitlines()
        except OSError as err:
            print("Could not build host list: %s" % err)
            exit(1)

        for ip in self.hosts:
            print("%s" % str(ip))

    def setupRadSSH(self):
        self.login                  = AuthManager(self.user,include_userkeys=True)
        self.console                = RadSSHConsole()
        self.connections            = [(x, None) for x in self.hosts]
        socket.setdefaulttimeout(10)


    def start(self):
        self.setupRadSSH()
        self.cluster = Cluster(self.connections, self.login, console=self.console)
        self.cluster.run_command('hostname')
        for host, job in self.cluster.last_result.items():
            if job.completed and job.result.return_code == 0:
                print("%s" % job.result.stdout)

    def print_output(self):
        '''
        print_output formats output from all command types
        :return: None
        '''
        for host, job in self.cluster.last_result.items():
            if job.completed and job.result.return_code == 0:
                print(job.result.stdout)
            else:
                print("%s   %s" % (host, self.cluster.connections[host]))
                print("%s   %s   %s" % (job, job.result.status, job.result.stderr))


    def restart(self):
        print("Restarting")

    def stop(self):
        print("Stopping")

    def listall(self):
        try:
            print("Listall")
        except OSError as err:
            print(str(err))
            exit(1)

    def checkConnections(self):
        print("Checking Connections")




def usage():
    print("Usage:  hpcc-platform [option(s)]\n")
    print(" -c|--component      -c <component_name>")
    print(" -l|--list           list all components and their respective addresses")
    print(" -d|--debug          debug logging level")
    print(" -f|--force          sigkill on components that fail to stop")
    print(" -v|--verbose        print all information to STDOUT")
    print(" -s|--save           save all output to file")
    print(" -p|--ping           check connections to cluster nodes")
    print(" -?|--help           print help")

if __name__ == '__main__':

    uid = pwd.getpwnam('hpcc')[2]
    os.setuid(uid)

    platform = HPCC()

    try:
        opts, args = getopt.getopt(sys.argv[1:],":csfdlv",["help","save","force","debug","list","verbose"])
    except getopt.GetoptError as err:
        print(str(err))
        usage()
        exit(1)

    for arg, value in opts:
        if arg in ("-?", "--help"):
            usage()
            exit(0)
        elif arg in ("-s", "--save"):
            platform.save(True)
        elif arg in ("-v", "--verbose"):
            platform.verbose(True)
        elif arg in ("-f", "--force"):
            platform.force_stop(True)
        elif arg in ("-d", "--debug"):
            platform.debug(True)
        elif arg in ("-l", "--list"):
            platform.print_list(True)
        elif arg in ("-c", "--component"):
            platform.component(str(value))
        elif arg in ("-p", "--ping"):
            platform.ping(True)
        else:
            print("Unknown Option: %s" % arg)
            usage()
            exit(1)

    platform.start()





